/*
 * We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has 
 * a particular price given by the price array. Our task is to find the maximum revenue 
 * that can be generated by selling the rod after cutting( if required) into pieces.
 */

public class RodCuttingProblem {
    

    static int f(int ind, int rodlength, int[] a, int[][] dp) {
        if (ind == 0) {
            return rodlength * a[0];
        }
        if (dp[ind][rodlength] != 0) {
            return dp[ind][rodlength];
        }

        int notake = f(ind - 1, rodlength, a, dp);
        int take = 0;
        if (rodlength >= ind + 1) {
            take = f(ind, rodlength - ind - 1, a, dp) + a[ind];
        }
        dp[ind][rodlength] = Math.max(notake, take);
        return dp[ind][rodlength];
    }
    static int cutRod(int price[], int n) {
        // Write your code here.
        int dp[][] = new int[n][n + 1];
        return f(n - 1, n, price, dp);
    }

    public static void main(String[] args) {
        int[] price={2, 5 ,7, 8 ,10};
        System.out.println(cutRod(price, 5));
    }

    // Tabulation Approach
    static int cutRod1(int a[], int n) {
        int dp[] = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i] = i * a[0];
        }
        for (int ind = 1; ind < n; ind++) {
            for (int rodlength = 0; rodlength <= n; rodlength++) {

                int notake = dp[rodlength];
                int take = 0;
                if (rodlength >= ind + 1) {
                    take = dp[rodlength - ind - 1] + a[ind];
                }
                dp[rodlength] = Math.max(notake, take);

            }

        }
        return dp[n];
    }
}
